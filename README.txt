README for Databases Project 1
Rose Huang rh2805
Frank Zhang rz2382
Group 67

The PostgreSQL account where your database on our server resides:

PostgreSQL account name: rh2805


The URL of your web application:

http://35.227.53.219:8111


A description of the parts:

This application allows a user to discover works of art in art museums in New York City. 

LOGIN/CREATE USER
Upon loading the website, you will be asked to login or create a new user if you are not logged in already. To login, you can select your name and user_id from a drop down menu. You will remain logged in until you click the Logout button. To create a new user, you must enter a name of at least one character, and a user will be added to the database with the next user_id in sequential order (ie if there are 15 users and you create a new user, your user_id is 16).
NOTE: ONLY ONE USER CAN LOG IN AT A TIME
Once a user is logged in on one computer, any time the application is accessed through any computer, the user remains logged in until logout is pressed on any computer. Thus, if you are logged in on one computer, and someone else presses log out, you will be logged out. Internal Server Error will occur if someone else logs you out but you still try to access User Information.

UPON LOGGING IN/ADD AND GET USER PREFS/RECS
You will have an option to logout at the very top of the app. You will also have 4 drop-down menus allowing you to add artwork, artist, and movement preferences, and add museums that you have visited. You have the option to "Get user information" which will display tables with artwork titles, artist names, movement names, and visited museum names that you've indicated you like/have visited. Based on your preferred artists and movements, you will also receive a table of recommended artworks with the title, artist, movement, and museum it is located in. 

Functions below are available whether you are logged in or not
SEARCH FOR ARTWORKS
You can search for artworks by artwork id, medium of artwork, place created, title, and year, with "ANY" as the default. Upon searching with any of these attributes, a table of all matching results will be displayed. This table will include artwork id, title, place created, medium, year, artist name, museum name, and exhibition name for the artworks that match the query.

SEARCH FOR MUSEUMS
You can indicate name of museum and CU discount options with defaults being "Any" and "CU Discount does not matter," respectively. A table with matching museums will be displayed, including information about the museum name, location, and discount option. This will allow Columbia students to filter by whether or not they have free admission to the museum!

SEARCH FOR ARTISTS BY MOVEMENT
You can select the name of any movement that is contained in the database through a drop down menu and receive a list of artist names that participated in that movement.


TRIVIAL THINGS NOT IMPLEMENTED
We did not allow users to search for museums by location (because it is seemingly trivial to search by a specific address) or museum id (because museum id is a trivial number generated by the database).


Briefly describe two of the web pages that require (what you consider) the most interesting database operations in terms of what the pages are used for, how the page is related to the database operations (e.g., inputs on the page are used in such and such way to produce database operations that do such and such), and why you think they are interesting.


http://35.227.53.219:8111/getuserinfo
This webpage queries from all tables related to the user, and displays query results for artworks, artists, and movements preferred by the user, as well as museums that the user has visited. It also displays a very helpful list of recommendations of artworks for the user to see in the future based on the user's preferred artists and movements. This was interesting because we used many of the database operations learned in class, such as union of tables and select functions. Inputs from the landing page for user preferences were updated in live time and used to populate the tables displayed in the /getuserinfo web page. 

http://35.227.53.219:8111/addartistpref
This webpage adds an artist preference for a logged in user. This was interesting because we were able to use an insert function, and update the list of preferences in real time. The artist preferences added by the user are also used to recommend artworks to the user in the /getuserinfo page. This webpage cannot be directly accessed through a GET request, only by pressing the button "Add artist preference," and the page redirects user back to the landing page. 


